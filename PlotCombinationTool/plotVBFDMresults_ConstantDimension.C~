#include <TROOT.h>
#include <TSystem.h>
#include <TChain.h>
#include <TFile.h>
#include<iostream>
#include<fstream>
#include <iomanip>
#include <stdlib.h>
#include <sstream>
#include <stdexcept>
#include <TH1.h>
#include <TH2.h>
#include <TF1.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TFile.h>
#include <TObjArray.h>
#include "TLegend.h"
#include "TGraph.h"
#include "stdio.h"
#include <TLatex.h>
#include <TColor.h>
#include <TMarker.h>
#include <TString.h>
#include "TGraphAsymmErrors.h"
#include <vector>
#include <TRandom3.h>
#include <TGaxis.h>
#include <algorithm>
#include "stylefile.h"


int plotVBFDMresults_ConstantDimension(TString variable="", TString PS="", TString Dimension="", TString Norm="") {

  gStyle->SetTitleBorderSize(0);
  gStyle->SetFrameBorderMode(0);
  gStyle->SetCanvasBorderMode(0);
  gStyle->SetPadBorderMode(0);
  gStyle->SetCanvasColor(kWhite);
  gStyle->SetPadColor(kWhite);
  gStyle->SetHistLineWidth(2);
  gStyle->SetTextFont(42);

  gROOT->SetStyle("ATLAS");
  gROOT->ForceStyle();

  gSystem->Exec("mkdir Figures/"""+Dimension+"""/"+Norm+"");

  TString xaxis = "NULL";
  TString yaxis = "";

  
  //  yaxis = "1/#sigma^{"+PS+"}_{W}#upoint ";
  
  if (variable.Contains("Mjj")) {
    xaxis = "Dijet mass [GeV]";
    yaxis += "d#sigma/dm_{jj}"; 
  }
  if (variable.Contains("Jet1PT")) {
    xaxis = "Leading jet p_{T} [GeV]";
    yaxis += "d#sigma/dp_{T}"; 
  }
  if (variable.Contains("Jet2PT")) {
    xaxis = "Second jet p_{T} [GeV]";
    yaxis += "d#sigma/dp_{T}"; 
  }
  if (variable.Contains("NumJets")) {
    xaxis = "Number of Jets";
    yaxis += "d#sigma/dN"; 
  }
  if (variable.Contains("Jet1Eta")) {
    xaxis = "Leading Jet #eta";
    yaxis += "d#sigma/d#eta";
  }
  if (variable.Contains("Jet2Eta")) {
    xaxis = "Leading Jet #eta";
    yaxis += "d#sigma/d#eta";
  }
  if (variable.Contains("DeltaEta")) {
    xaxis = "#Delta#eta(j_{1}, j_{2})";
    yaxis += "d#sigma/d#Delta#eta";
  }
  if (variable.Contains("DeltaPhi")) {
    xaxis = "#Delta#phi(j_{1}, j_{2})";
    yaxis += "d#sigma/d#Delta#phi"; 
  }
  if (variable.Contains("Etmiss")) {
    xaxis = "Missing Transverse Energy [GeV]";
    yaxis += "d#sigma/dETMiss"; 
  }


  //  -- READ IN YOUR VARIOUS FILES HERE (SEE HOW VARIABLE AND PS ARE PASSED IN THE FILENAME) AND PULL OUT THE HISTOGRAMS YOU WANT
  TH1F* Mass1;
  if (Dimension=="Higgs"){
      TFile* file_Mass1 = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/"""+Dimension+"""/Mass1/"+Norm+"/Rivet.root", "READ");
      file_Mass1->cd("MC_VBFDM_"+Norm+"");
      Mass1 = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");
    }  


  TFile* file_Mass10 = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/"""+Dimension+"""/Mass10/"+Norm+"/Rivet.root", "READ");
  file_Mass10->cd("MC_VBFDM_"+Norm+"");
  TH1F* Mass10 = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");

  TFile* file_Mass100 = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/"""+Dimension+"""/Mass100/"+Norm+"/Rivet.root", "READ");
  file_Mass100->cd("MC_VBFDM_"+Norm+"");
  TH1F* Mass100 = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");
  
  TFile* file_Mass1000 = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/"""+Dimension+"""/Mass1000/"+Norm+"/Rivet.root", "READ");
  file_Mass1000->cd("MC_VBFDM_"+Norm+"");  
  TH1F* Mass1000 = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");

  TFile* file_QCD = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/Backgrounds/QCD/"+Norm+"/Rivet.root", "READ");
  file_QCD->cd("MC_VBFDM_"+Norm+"");
  TH1F* QCD = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");
  QCD->Scale(0.2);

  TFile* file_EWK = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/Backgrounds/EWK/"+Norm+"/Rivet.root", "READ");
  file_EWK->cd("MC_VBFDM_"+Norm+"");
  TH1F* EWK = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");          

  TFile* file_Inclusive = new TFile("~/Documents/Rivet_Analyses/MC_VBFDM/Backgrounds/Inclusive/"+Norm+"/Rivet.root", "READ");                                                        
  file_Inclusive->cd("MC_VBFDM_"+Norm+"");
  TH1F* Inclusive = (TH1F*)gDirectory->Get(""+variable+"_PS_"+PS+"");          
  

    TH1F* QCD_Copy = (TH1F*)QCD->Clone("QCD_Copy");
    TH1F* EWK_Copy = (TH1F*)EWK->Clone("EWK_Copy");

    TH1F EWK_and_fifthQCD_NotP = (*QCD_Copy)+(*EWK_Copy);
    TH1F* EWK_and_fifthQCD = &EWK_and_fifthQCD_NotP;
  //  -- HERE YOU COULD MANIPULATE THEM IF YOU WANTED TO, BUT THERE IS NO NEED RIGHT NOW (AS FAR AS I REMEMBER)

  //  YOU COULD LATER MAKE HISTOGRAMS OF EVERY SAMPLE TO SOME FIXED SAMPLE (LIKE ZNUNU+2J) HERE, AND THEN LATER PLOT THESE IN THE SMALL PANE IN THE LOWER PART OF THE PDF, TO SHOW THE RELATIVE SHAPE DIFFERENCES BETWEEN THIS SM PROCESS AND THE VARIOUS OTHER SAMPLES

  //////////////////////////////////////////////////////////////////////////////////////////


  //  -- THIS IS WHERE THE ROOT CANVAS IS BUILT, THE ACTUAL PLOT

  //////////////////////////////////////////////////////////////////////////////////////////
  TCanvas *canv;
  if (Norm=="Normalised") {
    canv = new TCanvas("canv","",1500,1800);
  } 
  else {
    canv = new TCanvas("canv","",1500,1500);
    }

  gStyle->SetOptFit(0);
  gStyle->SetOptStat(0);
  gStyle->SetTitleFillColor(0);
  gStyle->SetFuncColor(kRed);
  gStyle->SetTitleBorderSize(0);
  gStyle->SetTextAlign(22);
  gStyle->SetStatW(0.2);
  gStyle->SetStatH(0.1);

  canv->cd();  

  // THIS DEFINES THE MAIN PAD IN THE OUTPUT PLOTS, AND A RATIO PAD (AT THE BOTTOM OF THE PDF FILES) IS DEFINED LATER
  
  TPad *mainPad;
  if (Norm=="Normalised") {
    mainPad = new TPad("mainPad","", 0.01, 0.2, 0.99, 0.99);
  }
  else{
    mainPad = new TPad("mainPad","", 0.01, 0.02, 0.99, 0.99);    
  }
  mainPad->Draw();
  mainPad->cd();
  

  Double_t margin = 0.1;
  //  -- THIS IS JUST ME TWEAKING THE BOUNDARIES OF THE AXES FOR PRESENTATIONAL REASONS...
  //  if (variable.Contains("JC") || variable.Contains("LC") || variable.Contains("DeltaPhi")) {
  //    margin = 0.01;
  //  }

  Double_t upperRange = Mass1000->GetXaxis()->GetBinLowEdge(Mass1000->GetNbinsX()+1) + margin;

  //  if (variable.Contains("dijetpt") && PS.Contains("highmass20") ) {
  //    upperRange = 730+margin;
  //    cout << "WARNING: manually setting binning for dijet pt in highmass20 to upper range 730 GeV! " << endl;
  //  }

  // MAKES A DUMMY HISTOGRAM WITH ONE BIN -- I MAKE THE STYLE FOR THIS RIGHT, AND AXIS LABELS ETC, THEN CAN PLOT ANY HISTOGRAM I WANT "ON TOP" OF THIS AND IT WILL STILL HAVE THE SAME HISTOGRAM LABELS AS THE DUMMY
  TH1F *frame = new TH1F("frame",";"+xaxis+";"+yaxis+";",1, Mass1000->GetXaxis()->GetBinLowEdge(1)-margin, upperRange);

  Double_t font_size = 60;
  frame->GetYaxis()->SetTitleOffset( 2.0 );
  frame->GetYaxis()->SetLabelOffset( 0.005 );
  frame->GetYaxis()->SetTitleFont( 43 );
  frame->GetYaxis()->SetLabelFont( 43 );
  frame->GetYaxis()->SetLabelSize( font_size );
  frame->GetYaxis()->SetTitleSize( font_size );

  frame->GetXaxis()->SetTitleOffset( 2.0 );
  frame->GetXaxis()->SetLabelOffset( 0.005 );
  frame->GetXaxis()->SetTitleFont( 43 );
  frame->GetXaxis()->SetLabelFont( 43 );
  frame->GetXaxis()->SetLabelSize( font_size );
  frame->GetXaxis()->SetTitleSize( font_size );


  // HERE YOU CAN SET ALL THE COLOURS AND STYLES AND MARKERS FOR YOUR HISTOGRAMS (VARIABLES DEFINED IN THE HEADER FILE)
  if (Dimension.Contains("Higgs")){
      Mass1->SetLineColor(Mass1_line_color);Mass1->SetLineStyle(Mass1_line_style);Mass1->SetLineWidth(Mass1_line_width);Mass1->SetFillColor(Mass1_fill_color);
      Mass1->SetFillStyle(Mass1_fill_style);Mass1->SetMarkerColor(Mass1_line_color);Mass1->SetMarkerStyle(Mass1_marker_style);Mass1->SetMarkerSize(Mass1_marker_size);
  }

  Mass10->SetLineColor(Mass10_line_color);Mass10->SetLineStyle(Mass10_line_style);Mass10->SetLineWidth(Mass10_line_width);Mass10->SetFillColor(Mass10_fill_color);
  Mass10->SetFillStyle(Mass10_fill_style);Mass10->SetMarkerColor(Mass10_line_color);Mass10->SetMarkerStyle(Mass10_marker_style);Mass10->SetMarkerSize(Mass10_marker_size);
  
  Mass100->SetLineColor(Mass100_line_color);Mass100->SetLineStyle(Mass100_line_style);Mass100->SetLineWidth(Mass100_line_width);Mass100->SetFillColor(Mass100_fill_color);
  Mass100->SetFillStyle(Mass100_fill_style);Mass100->SetMarkerColor(Mass100_line_color);Mass100->SetMarkerStyle(Mass100_marker_style);Mass100->SetMarkerSize(Mass100_marker_size);
    
  Mass1000->SetLineColor(Mass1000_line_color);Mass1000->SetLineStyle(Mass1000_line_style);Mass1000->SetLineWidth(Mass1000_line_width);Mass1000->SetFillColor(Mass1000_fill_color);
  Mass1000->SetFillStyle(Mass1000_fill_style);Mass1000->SetMarkerColor(Mass1000_line_color);Mass1000->SetMarkerStyle(Mass1000_marker_style);
  Mass1000->SetMarkerSize(Mass1000_marker_size);

  QCD->SetLineColor(QCD_line_color);QCD->SetLineStyle(QCD_line_style);QCD->SetLineWidth(QCD_line_width);QCD->SetFillColor(QCD_fill_color);QCD->SetFillStyle(QCD_fill_style);
  QCD->SetMarkerColor(QCD_line_color);QCD->SetMarkerStyle(QCD_marker_style);QCD->SetMarkerSize(QCD_marker_size);

  EWK->SetLineColor(EWK_line_color);EWK->SetLineStyle(EWK_line_style);EWK->SetLineWidth(EWK_line_width);EWK->SetFillColor(EWK_fill_color);EWK->SetFillStyle(EWK_fill_style);
  EWK->SetMarkerColor(EWK_line_color);EWK->SetMarkerStyle(EWK_marker_style);EWK->SetMarkerSize(EWK_marker_size);

  EWK_and_fifthQCD->SetLineColor(Inclusive_line_color);EWK_and_fifthQCD->SetLineStyle(Inclusive_line_style);EWK_and_fifthQCD->SetLineWidth(Inclusive_line_width);
  EWK_and_fifthQCD->SetFillColor(Inclusive_fill_color);EWK_and_fifthQCD->SetFillStyle(Inclusive_fill_style);EWK_and_fifthQCD->SetMarkerColor(Inclusive_line_color);
  EWK_and_fifthQCD->SetMarkerStyle(Inclusive_marker_style);EWK_and_fifthQCD->SetMarkerSize(Inclusive_marker_size);


  // MAXIMUM AND MINIMUM OF Y-AXIS
  
  Double_t max;
  Double_t min;
  
    if(Norm=="Normalised"){
      if (variable.Contains("Count")) {
	max = 2e0;
	min = 1e-2;
      }
      if (variable.Contains("Mjj")) {
	max = 1e0;
	min = 1e-4;
      }
      if (variable.Contains("Jet1PT")) {
	if(PS=="VBFZ_Baseline" || PS=="VBFZ_Search"){
	  max = 1e0;
	}
	else {
	  max = 1e0;
	}
	min = 1e-4;
      }
      if (variable.Contains("Jet2PT")) {
	max = 1e0;
	min = 1e-4;
      }
      if (variable.Contains("NumJets")) {
	max = 1e0;
	min = 1e-4;
      }
      if (variable.Contains("Jet") && variable.Contains("Eta")) {
	if(PS=="VBFZ_Baseline"){    
	  max = 1e0;
	}
	else{ 
	  max = 1e0;
	}
	min = 1e-4;
      }
      if (variable.Contains("DeltaEta")) {
	max = 1e0;
	min = 1e-4;
      }
      if (variable.Contains("DeltaPhi")) {
	if(PS=="VBFZ_Baseline" || PS=="VBFZ_Search"){
	  max = 1e0;
	}
	else if (PS=="VBFZ_HighMass"){
	  max = 1e0;
	}
	else{
	  max = 1e-1;
	}
	min = 1e-3;
      }
      if (variable.Contains("Etmiss")) {
	max = 1e0;
	min = 1e-2;
      }
    }

    if(Norm=="Absolute"){
      if (variable.Contains("Count")) {
	max = 1e8;
	min = 1e-2;
      }
      if (variable.Contains("Mjj")) {
        max = 1e5;
        min = 1e-4;
      }
      if (variable.Contains("Jet1PT")) {
        max = 1e4;
        min = 1e-4;
      }
      if (variable.Contains("Jet2PT")) {
        max = 1e5;
        min = 1e-4;
      }
      if (variable.Contains("NumJets")) {
        max = 1e5;
        min = 1e-4;
      }
      if (variable.Contains("Jet") && variable.Contains("Eta")) {
          max = 1e5;
          min = 1e-4;
      }
      if (variable.Contains("DeltaEta")) {
        max = 1e4;
        min = 1e-4;
      }
      if (variable.Contains("DeltaPhi")) {
          max = 1e4;
          min = 1e-4;
      }
      if (variable.Contains("Etmiss")) {
        max = 1e5;
        min = 1e-4;
      }
    }

  frame->SetMaximum(max);
  frame->SetMinimum(min);

  gPad->SetTopMargin(0.02);
  gPad->SetBottomMargin(0.15);
  gPad->SetLeftMargin(0.17);
  gPad->SetRightMargin(0.02);
  
  frame->Draw("P");
  
  //if (!variable.Contains("PT") && !variable.Contains("Mjj") && !variable.Contains("NumJets")) {
  gPad->SetLogy(1);
  //}
  if (variable.Contains("Mjj") ) {
  gPad->SetLogx(1);//frame->GetXaxis()->SetMoreLogLabels();
  }

  //gStyle->SetEndErrorSize(5);


  // ACTUAL DRAWING OF THE HISTOGRAMS

  if (Norm == "Absolute"){
    Double_t scaling;
    if (Dimension == "D5a"){
      scaling = 1;
    }
    if (Dimension == "D5b"){
      scaling = 1;
    }
    if (Dimension == "D5c"){
      scaling = pow(((0.1)/(3.3)),4);
    }
    if (Dimension == "D5d"){
      scaling = pow(((0.1)/(6.6)),4);
    }
    if (Dimension == "D6a"){
      scaling = pow(((1)/(2.3)),5);
    }
    if (Dimension == "D6b"){
      scaling = pow(((1)/(3.3)),5);
    }
    if (Dimension == "D7a"){
      scaling = 1;
    }
    if (Dimension == "D7b"){
      scaling = 1;
    }
    if (Dimension == "D7c"){
      scaling = 1;
    }
    if (Dimension == "D7d"){
      scaling = 1;
    }
    if (Dimension == "Higgs"){
      scaling = 1;
    }
    if (Dimension.Contains("Higgs")){
      Mass1->Scale(scaling);
    }
    Mass10->Scale(scaling);
    Mass100->Scale(scaling);
    Mass1000->Scale(scaling);

  }

  EWK_and_fifthQCD->Draw("HIST same");
  QCD->Draw("HIST same");
  EWK->Draw("HIST same");
    if (Dimension.Contains("Higgs")){
	Mass1->Draw("PH same");
      }
  Mass10->Draw("PH same");
  Mass100->Draw("PH same");
  Mass1000->Draw("PH same");

  /*
  TGraphAsymmErrors* double_data_err = (TGraphAsymmErrors*)data_err->Clone("double_data_err");
  double_data_err->SetMarkerSize(1.0*data_marker_size);// was 0.9
  if (drawData) {
    double_data_err->Draw("Psame");
  }
  */
  //  TLatex txt_PS;txt_PS.SetNDC();txt_PS.SetTextAlign(11);txt_PS.SetTextSize(0.03);txt_PS.DrawLatex(0.22,0.20,"pp->2DM+2jets: ""Dimension "+Dimension+" "+PS+" phase space");

  // BUILDING THE LEGEND...

  Double_t yval1 = 0.96;
  Double_t xval = 0.3;

  Double_t finalVal = yval1-0.1;

  
  TLegend *leg_main = new TLegend(xval,finalVal,xval+0.6,yval1);
  leg_main->SetNColumns(3);
  leg_main->SetFillColor(0);
  leg_main->SetTextSize(0.02);
  leg_main->SetBorderSize(0);
  leg_main->SetTextFont(42);
    if (Dimension.Contains("Higgs")){
	  leg_main->AddEntry(Mass1,"DM Mass 1GeV","PL");
	}
  leg_main->AddEntry(Mass10,"DM Mass 10GeV","PL");
  leg_main->AddEntry(Mass100,"DM Mass 100GeV","PL");
  leg_main->AddEntry(Mass1000,"DM Mass 1000GeV","PL");
  leg_main->AddEntry(QCD,"QCD Z(#nu#nu)jj","f");
  leg_main->AddEntry(EWK,"EWK Z(#nu#nu)jj","f");
  leg_main->AddEntry(EWK_and_fifthQCD,"QCD+EWK Z(#nu#nu)jj","f");
  leg_main->Draw("same");
  

  // BELOW HERE, THE RATIO PANE AT THE BOTTOM OF THE PDF IS DRAWN

  //  Double_t ratio_font_scale = 2.4;
  Double_t height = 0.35;
  Double_t shift =  -0.05;
  Double_t topPady = 0.56;
  //  Double_t label_offset = 0.02;
  //  Double_t ytitle_offset = 0.6;
    

  if (Norm=="Normalised"){

    TLine *ratioline= new TLine(frame->GetBinLowEdge(1),1.0,frame->GetBinLowEdge(frame->GetNbinsX()+1),1.0);
    ratioline->SetLineColor(1);ratioline->SetLineStyle(1);ratioline->SetLineWidth(1);

    canv->cd();
    //    TPad *ratioPad_1 = new TPad("ratioPad_1","", 0.01, topPady-height, 0.99, topPady);
    TPad *ratioPad = new TPad("ratioPad","", 0.01, 0.02, 0.99, 0.285);
    ratioPad->SetGridy();
    ratioPad->Draw();
    ratioPad->cd();
    
    gPad->SetTopMargin(0.02);
    gPad->SetBottomMargin(0.3);
    gPad->SetLeftMargin(0.17);
    gPad->SetRightMargin(0.02);
    
    TH1F* M10_ratio = (TH1F*)EWK->Clone("M10_ratio");
    TH1F* M100_ratio = (TH1F*)EWK->Clone("M100_ratio");
    TH1F* M1000_ratio = (TH1F*)EWK->Clone("M1000_ratio");
    
    M10_ratio->GetYaxis()->SetTitle("DM/EWK");
    M10_ratio->GetYaxis()->SetTitleSize(40);
    M10_ratio->GetYaxis()->SetTitleFont(43);
    M10_ratio->GetYaxis()->SetTitleOffset(1.55);
    M10_ratio->GetXaxis()->SetTitleSize(40);
    M10_ratio->GetXaxis()->SetTitleFont(43);
    M10_ratio->GetXaxis()->SetTitleOffset(4.);
    M10_ratio->SetMaximum(3);
    M10_ratio->SetMinimum(-1);
    M10_ratio->Sumw2();
    M10_ratio->Divide(Mass10);
    M100_ratio->Divide(Mass100);
    M1000_ratio->Divide(Mass1000);
    M10_ratio->GetYaxis()->SetNdivisions(10);
    M10_ratio->SetTickLength(0.08);
    M10_ratio->SetMarkerStyle(Mass10_marker_style);
    M100_ratio->SetMarkerStyle(Mass100_marker_style);
    M1000_ratio->SetMarkerStyle(Mass1000_marker_style);

    M10_ratio->SetMarkerColor(Mass10_line_color);
    M100_ratio->SetMarkerColor(Mass100_line_color);
    M1000_ratio->SetMarkerColor(Mass1000_line_color);

    M10_ratio->SetLineColor(Mass10_line_color);
    M100_ratio->SetLineColor(Mass100_line_color);
    M1000_ratio->SetLineColor(Mass1000_line_color);

    if (Dimension=="Higgs"){
      TH1F* M1_ratio = (TH1F*)EWK->Clone("M1_ratio");
      M1_ratio->GetYaxis()->SetTitle("DM/EWK");
      M1_ratio->GetYaxis()->SetTitleSize(40);
      M1_ratio->GetYaxis()->SetTitleFont(43);
      M1_ratio->GetYaxis()->SetTitleOffset(1.55);
      M1_ratio->GetXaxis()->SetTitleSize(40);
      M1_ratio->GetXaxis()->SetTitleFont(43);
      M1_ratio->GetXaxis()->SetTitleOffset(4.);
      M1_ratio->SetMaximum(3);
      M1_ratio->SetMinimum(-1);
      M1_ratio->Divide(Mass1);
      M1_ratio->SetMarkerStyle(Mass1_marker_style);
      M1_ratio->SetMarkerColor(Mass1_line_color);
      M1_ratio->SetLineColor(Mass1_line_color);
      M1_ratio->Draw("ep same");
    }
    M10_ratio->Draw("ep same");
    M100_ratio->Draw("ep same");
    M1000_ratio->Draw("ep same");

  }


    
    //if (variable.Contains("j1pt") || variable.Contains("mass") ) {
      //gPad->SetLogx(1);//frame->GetXaxis()->SetMoreLogLabels();
    //}
    
    //TGraphAsymmErrors* double_dataRatio_err = (TGraphAsymmErrors*)dataRatio_err->Clone("double_dataRatio_err");
    //double_dataRatio_err->SetMarkerSize(0.9*data_marker_size);
    //double_dataRatio_err->Draw("Psame");

    //    TLatex njet2;njet2.SetNDC();njet2.SetTextAlign(11);njet2.SetTextSize(0.03*3);njet2.DrawLatex(0.663+0.03,0.36,"W(#rightarrow e#nu)+#geq2 jets+X");    
    

    //  }

  //TString normalisationFilenameModifier = "";
  //if (!normaliseToIntegral) normalisationFilenameModifier = "AbsXSec";


  // SAVE ALL THESE HISTOGRAMS YOU MIGHT HAVE READ FROM VARIOUS FILES, OR DONE VARIOUS MODIFICATIONS TO,  TO A ROOT FILE, SO YOU CAN EASILY GET HOLD OF THEM AGAIN!
  
  TFile * outfile = new TFile("Figures/"+Dimension+"/"+Norm+"/"+Dimension+"_"+variable+"_PS_"+PS+".root", "RECREATE");
  outfile->cd();

  QCD->Write("QCD");
  EWK->Write("EWK");
  EWK_and_fifthQCD->Write("EWK_and_fifthQCD");
    if (Dimension.Contains("Higgs")){
      Mass1->Write("Mass1");	  
    }
  Mass10->Write("Mass10");
  Mass100->Write("Mass100");
  Mass1000->Write("Mass1000");
  frame->Write("frame"); // just store for ease of use / plotting later

  outfile->Close();

  // THIS ACTUALLY WRITES OUT THE PLOTS (PDF/PNG/EPS FORMAT)

  gPad->RedrawAxis();canv->Print("Figures/"+Dimension+"/"+Norm+"/"+Dimension+"_"+variable+"_PS_"+PS+".pdf");
  gPad->RedrawAxis();canv->Print("Figures/"+Dimension+"/"+Norm+"/"+Dimension+"_"+variable+"_PS_"+PS+".png");
  gPad->RedrawAxis();canv->Print("Figures/"+Dimension+"/"+Norm+"/"+Dimension+"_"+variable+"_PS_"+PS+".eps");

  return 0;
} 
	  

